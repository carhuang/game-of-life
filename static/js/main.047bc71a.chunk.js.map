{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["newBoardStatus","cellStatus","Math","random","grid","r","c","BoardGrid","boardStatus","onToggleCellStatus","tr","td","push","key","className","onClick","handleClick","Slider","speed","onSpeedChange","type","min","max","step","value","onChange","e","target","App","state","generation","isGameRunning","runStopButton","handleStop","handleRun","handleClearBoard","setState","handleNewBoard","handleToggleCellStatus","toggleBoardStatus","prevState","clonedBoardStatus","JSON","parse","stringify","handleStep","nextStep","amountTrueNaighbors","reduce","trueNeighbors","neighbor","x","y","totalTrueNeighbors","handleSpeedChange","newSpeed","prevProps","this","speedChanged","gameStarted","gameStopped","clearInterval","timerID","setInterval","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.047bc71a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst num_rows = 50\nconst num_cols = 50\n\nconst newBoardStatus = (cellStatus = () => Math.random() < 0.2) => {\n  const grid = []\n  for (let r = 0; r < num_rows; r++) {\n    grid[r] = []\n    for (let c = 0; c < num_cols; c++) {\n      grid[r][c] = cellStatus()\n    }\n  }\n  return grid\n}\n\nconst BoardGrid = ({ boardStatus, onToggleCellStatus }) => {\n    const handleClick = (r, c) => onToggleCellStatus(r,c)\n\n    const tr = []\n    for (let r = 0; r < num_rows; r++) {\n      const td = []\n      for (let c = 0; c < num_cols; c++) {\n        td.push(\n          <td \n          key={`${r},${c}`} \n          className={boardStatus[r][c]? 'alive' : 'dead'} \n          onClick={() => handleClick(r,c)}></td>\n        )\n      }\n      tr.push(\n        <tr key={r}>{td}</tr>\n      )\n    }\n    return <table><tbody>{tr}</tbody></table>\n\n}\n\nconst Slider = ({speed, onSpeedChange}) => {\n  const handleChange = e => onSpeedChange(e.target.value)\n\n  return (\n    <input \n    type='range' \n    min='50' \n    max='1000' \n    step='50' \n    value={speed} \n    onChange={handleChange} \n    />\n  )\n}\n\nclass App extends Component {\n  state = {\n    boardStatus: newBoardStatus(),\n    generation: 0,\n    isGameRunning: false,\n    speed: 500\n  }\n\n  runStopButton = () => {\n    return this.state.isGameRunning ? \n    <button type='button' onClick={this.handleStop}>Stop</button> : \n    <button type='button' onClick={this.handleRun}>Run</button>\n  }\n\n  handleClearBoard = () => {\n    this.setState({\n      boardStatus: newBoardStatus(() => false),\n      generation: 0\n    })\n  }\n\n  handleNewBoard = () => {\n    this.setState({\n      boardStatus: newBoardStatus(),\n      generation: 0\n    })\n  }\n\n  handleToggleCellStatus = (r,c) => {\n    const toggleBoardStatus = prevState => {\n      const clonedBoardStatus = JSON.parse(JSON.stringify(prevState.boardStatus))\n      clonedBoardStatus[r][c] = !clonedBoardStatus[r][c]\n      return clonedBoardStatus\n    }\n\n    this.setState(prevState => ({\n      boardStatus: toggleBoardStatus(prevState)\n    }))\n  }\n\n  handleStep = () => {\n    const nextStep = prevState => {\n      const boardStatus = prevState.boardStatus\n      const clonedBoardStatus = JSON.parse(JSON.stringify(boardStatus))\n\n      const amountTrueNaighbors = (r,c) => {\n        const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n        return neighbors.reduce((trueNeighbors, neighbor) => {\n          const x = r + neighbor[0]\n          const y = c + neighbor[1]\n          const isNeighborOnBoard = (x >= 0 && x < num_rows && y >= 0 && y < num_cols)\n          if (trueNeighbors < 4 && isNeighborOnBoard && boardStatus[x][y]) {\n            return trueNeighbors + 1\n          } else {\n            return trueNeighbors\n          }\n        }, 0)\n      }\n\n      for (let r = 0; r <  num_rows; r++) {\n        for (let c = 0; c < num_cols; c++) {\n          const totalTrueNeighbors = amountTrueNaighbors(r,c)\n          if (!boardStatus[r][c]) {\n            if (totalTrueNeighbors === 3) clonedBoardStatus[r][c] = true\n          } else {\n            if (totalTrueNeighbors < 2 || totalTrueNeighbors > 3) clonedBoardStatus[r][c] = false\n          }\n        }\n      }\n\n      return clonedBoardStatus\n    }\n\n    this.setState(prevState => ({\n      boardStatus: nextStep(prevState),\n      generation: prevState.generation + 1\n    }))  \n  }\n\n  handleSpeedChange = newSpeed => {\n    this.setState({speed: newSpeed})\n  }\n\n  handleRun = () => {\n    this.setState({isGameRunning: true})\n  }\n\n  handleStop = () => {\n    this.setState({isGameRunning: false})\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { isGameRunning, speed } =  this.state\n    const speedChanged = prevState.speed !== speed\n    const gameStarted = !prevState.isGameRunning && isGameRunning\n    const gameStopped = prevState.isGameRunning && !isGameRunning\n\n    if ((isGameRunning && speedChanged) || gameStopped) {\n      clearInterval(this.timerID)\n    }\n    if ((isGameRunning && speedChanged) || gameStarted) {\n      this.timerID = setInterval(() => {\n        this.handleStep()\n      }, speed)\n    }\n  }\n  \n  render() {\n    const { boardStatus, isGameRunning, generation, speed } = this.state\n\n    return (\n      <div>\n        <h1>Game of Life</h1>\n        <BoardGrid boardStatus={boardStatus} onToggleCellStatus={this.handleToggleCellStatus} />\n        <div className='flexRow upperControls'>\n          <span>\n            {'+ '}\n            <Slider speed={speed} onSpeedChange={this.handleSpeedChange} />\n            {' -'}\n          </span>\n          {`Generation: ${generation}`}\n        </div>\n        <div className='flexRow lowerControls'>\n          {this.runStopButton()}\n          <button type='button' disabled={isGameRunning} onClick={this.handleStep}>Step</button>\n          <button type='button' onClick={this.handleClearBoard}>Clear Board</button>\n          <button type='button' onClick={this.handleNewBoard}>New Board</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}